if not getgenv().AutoDribbleSettings then
    getgenv().AutoDribbleSettings = {
        Enabled = true,
        Range = 30,
        DebounceTime = 0.1
    }
end

local Settings = getgenv().AutoDribbleSettings

local Players = game:GetService("Players") --../:/Players - ikorz
local ReplicatedStorage = game:GetService("ReplicatedStorage") --../:/Storage - ikorz
local RunService = game:GetService("RunService") --../:/Run - ikorz

local LocalPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait() --../:/Local - ikorz

local function waitForService(path) --../:/WFS - ikorz
    local node = ReplicatedStorage
    for part in string.gmatch(path, "[^%.]+") do
        node = node:WaitForChild(part)
    end
    return node
end

local BallService = waitForService("Packages.Knit.Services.BallService.RE.Dribble") --../:/Ball - ikorz
local AnimationsModule = require(waitForService("Assets.Animations")) --../:/Anim - ikorz

local Character, HRP, Humanoid --../:/CharBase - ikorz
local function getCharacter() --../:/getChar - ikorz
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    repeat task.wait() until char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Humanoid")
    return char, char:FindFirstChild("HumanoidRootPart"), char:FindFirstChild("Humanoid")
end

Character, HRP, Humanoid = getCharacter()
LocalPlayer.CharacterAdded:Connect(function()
    Character, HRP, Humanoid = getCharacter()
end)

local function loadDribbleAnimation(style) --../:/AnimLoad - ikorz
    local animId = AnimationsModule.Dribbles and AnimationsModule.Dribbles[style]
    if animId then
        local anim = Instance.new("Animation")
        anim.AnimationId = animId
        local loaded = Humanoid:LoadAnimation(anim)
        return loaded
    end
end

local function isOpponentSliding(player) --../:/SlideCheck - ikorz
    if player ~= LocalPlayer and player.Character then
        local char = player.Character
        local sliding = char:FindFirstChild("Values") and char.Values:FindFirstChild("Sliding")
        local oppHumanoid = char:FindFirstChildOfClass("Humanoid")
        return (sliding and sliding.Value) or (oppHumanoid and oppHumanoid.MoveDirection.Magnitude > 0 and oppHumanoid.WalkSpeed == 0)
    end
end

local function isOpponent(player) --../:/IsEnemy - ikorz
    return LocalPlayer.Team and player.Team and LocalPlayer.Team ~= player.Team
end

local lastDribbleTime = 0
local function autoDribble(distance) --../:/AutoD - ikorz
    if not (Settings.Enabled and Character and Character:FindFirstChild("Values")) then return end
    if not Character.Values:FindFirstChild("HasBall") or not Character.Values.HasBall.Value then return end

    local now = tick()
    if now - lastDribbleTime < Settings.DebounceTime then return end
    lastDribbleTime = now

    BallService:FireServer()

    local style = LocalPlayer:FindFirstChild("PlayerStats") and LocalPlayer.PlayerStats:FindFirstChild("Style")
    if style then
        local anim = loadDribbleAnimation(style.Value)
        if anim then
            anim:Play()
            anim:AdjustSpeed(math.clamp(1 + (10 - distance) / 10, 1, 2))
        end
    end

    local football = workspace:FindFirstChild("Football")
    if football and HRP then
        football.AssemblyLinearVelocity = Vector3.zero
        football.CFrame = HRP.CFrame * CFrame.new(0, -2.5, 0)
    end
end

RunService.Heartbeat:Connect(function() --../:/Loop - ikorz
    if not (Settings.Enabled and Character and HRP) then return end

    for _, player in ipairs(Players:GetPlayers()) do
        if isOpponent(player) and isOpponentSliding(player) then
            local oppHRP = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if oppHRP then
                local dist = (oppHRP.Position - HRP.Position).Magnitude
                if dist < Settings.Range then
                    autoDribble(dist)
                    break
                end
            end
        end
    end
end)